apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = ["src/"]
sourceSets.main.resources.srcDirs = ["../core/assets"]

project.ext.mainClassName = "com.broll.gainea.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../client/assets")

task runDesktop(dependsOn: classes, type: JavaExec) {
    group = "Execution"
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}


task testDesktop(dependsOn: classes, type: SpawnJavaExec) {
    group = "Execution"
    classpath = sourceSets.main.runtimeClasspath
    workingDir = project.assetsDir
    main = project.mainClassName
    args = ['test']
}


task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    archiveFileName.set("gainea.jar")
    with jar
}

dist.dependsOn classes


import java.util.concurrent.atomic.AtomicReference

class SpawnJavaExec extends JavaExec {

    @Internal
    final AtomicReference spawnRef = new AtomicReference()

    @TaskAction
    @Override
    void exec() {
        setJvmArgs(getJvmArgs())
        def javaExecAction = getExecActionFactory().newJavaExecAction()
        def f = super.getClass().superclass.superclass.getDeclaredField('javaExecSpec')
        f.accessible = true
        def javaExecSpec = f.get(this)
        javaExecSpec.copyTo(javaExecAction)
        def m = super.getClass().superclass.superclass.getDeclaredMethod('getEffectiveExecutable')
        m.accessible = true
        javaExecAction.executable = m.invoke(this)
        def execHandle = javaExecAction.build()
        spawnRef.set execHandle.start()
    }
}
